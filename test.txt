diff --git a/app/assets/stylesheets/api/comments.scss b/app/assets/stylesheets/api/comments.scss
new file mode 100644
index 0000000..3ba7a3a
--- /dev/null
+++ b/app/assets/stylesheets/api/comments.scss
@@ -0,0 +1,3 @@
+// Place all the styles related to the api/comments controller here.
+// They will automatically be included in application.css.
+// You can use Sass (SCSS) here: https://sass-lang.com/
diff --git a/app/assets/stylesheets/api/login_form.scss b/app/assets/stylesheets/api/login_form.scss
index b5954d9..a05a85d 100644
--- a/app/assets/stylesheets/api/login_form.scss
+++ b/app/assets/stylesheets/api/login_form.scss
@@ -1,26 +1,25 @@
 
 
+.login-form-container {
+    width: 100%;
+    // height: 70vh;
+    display: flex;
+    justify-content: center;
+    // background-color: red;
+    margin-top: 30vh;
+}
 
 .login-form {
     background-color: #FFFFFF;
     display: flex;
     flex-direction: column;
-    width: 21%;
+    width: 400px;
     // padding: 1%;
     align-items: center;
     border-radius: 10px;
     margin-left: 100px;
 }
 
-.login-form-container {
-    width: 100%;
-    // height: 70vh;
-    display: flex;
-    justify-content: center;
-    // background-color: red;
-    margin-top: 30vh;
-}
-
 .login-form-container > div {
     display: flex;
     flex-direction: column;
@@ -30,9 +29,9 @@
     font-family: Helvetica, Arial, sans-serif;
 }
 
-.login-form-container > div > img {
-    width: 70%;
-}
+// .login-form-container > div > img {
+//     width: 70%;
+// }
 
 .login-form * {
     margin: 4px;
@@ -78,4 +77,9 @@
     font-family: Helvetica;
 }
 
+.signup-link-div {
+    // TODO remove
+    padding-top: 20px;
+}
+
 
diff --git a/app/controllers/api/comments_controller.rb b/app/controllers/api/comments_controller.rb
new file mode 100644
index 0000000..bc0c513
--- /dev/null
+++ b/app/controllers/api/comments_controller.rb
@@ -0,0 +1,44 @@
+class Api::CommentsController < ApplicationController
+
+    # CHANGE THIS
+    def index
+        @comments = Comment.all
+        render :index
+    end
+
+    def create
+        @comment = Comment.new(post_params)
+
+        if @comment.save
+            render :show
+        else
+            render json: @comment.errors.full_messages, status: 422
+        end
+    end
+
+    def destroy
+        @comment = Comment.find(params[:id])
+        if @comment && @comment.destroy
+            render :index
+        else
+            render json: @comment.errors.full_messages, status: 422
+        end
+    end
+
+    def update
+        @comment = Comment.find(params[:id])
+        if @comment && @comment.update(comment_params)
+            render :show
+        else
+            render json: @comment.errors.full_messages, status: 422
+        end
+    end
+
+    private
+
+    def comment_params
+        # hacker might be able to exploit the post_id coming in from frontend
+        params.require(:comment).permit(:body, :post_id)
+    end
+
+end
diff --git a/app/controllers/api/posts_controller.rb b/app/controllers/api/posts_controller.rb
index 5efea70..1f8713c 100644
--- a/app/controllers/api/posts_controller.rb
+++ b/app/controllers/api/posts_controller.rb
@@ -1,6 +1,6 @@
 class Api::PostsController < ApplicationController
     def index
-        @posts = Post.all.includes(:author, :photo_blob, :photo_attachment)
+        @posts = Post.all.includes(:author, :photo_blob, :photo_attachment, author: [:profile_photo_blob, :profile_photo_attachment])
         render :index
     end
 
diff --git a/app/helpers/api/comments_helper.rb b/app/helpers/api/comments_helper.rb
new file mode 100644
index 0000000..99f8feb
--- /dev/null
+++ b/app/helpers/api/comments_helper.rb
@@ -0,0 +1,2 @@
+module Api::CommentsHelper
+end
diff --git a/app/models/comment.rb b/app/models/comment.rb
new file mode 100644
index 0000000..b591b69
--- /dev/null
+++ b/app/models/comment.rb
@@ -0,0 +1,11 @@
+class Comment < ApplicationRecord
+    validates :body, :post_id, :comment_author_id, presence: true
+
+    belongs_to :author,
+        foreign_key: :comment_author_id,
+        class_name: :User
+
+    belongs_to :post,
+        foreign_key: :post_id,
+        class_name: :Post
+end
diff --git a/app/models/post.rb b/app/models/post.rb
index b9c02f2..6ae0f65 100644
--- a/app/models/post.rb
+++ b/app/models/post.rb
@@ -7,5 +7,9 @@ class Post < ApplicationRecord
         foreign_key: :author_id,
         class_name: :User
 
+    has_many :comments,
+        foreign_key: :post_id,
+        class_name: :Comment
+
     has_one_attached :photo
 end
diff --git a/app/models/user.rb b/app/models/user.rb
index a52a5d0..76e74f9 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -13,6 +13,10 @@ class User < ApplicationRecord
 
     has_one_attached :profile_photo
 
+    has_many :comments,
+        foreign_key: :comment_author_id,
+        class_name: :Comment
+
     def self.find_by_credentials(email, password)
         user = User.find_by(email: email)
         if user
diff --git a/app/views/api/comments/index.json.jbuilder b/app/views/api/comments/index.json.jbuilder
new file mode 100644
index 0000000..83cb4ac
--- /dev/null
+++ b/app/views/api/comments/index.json.jbuilder
@@ -0,0 +1,16 @@
+
+@comments.each do |comment|
+    json.comments do
+        json.set! comment.id do
+            json.extract! comment, :body, :post_id, :comment_author_id
+        end
+    end
+
+    json.users do
+        json.set! comment.author_id do
+            user = comment.author
+            json.extract! user, :fname, :lname
+            json.photoUrl url_for(user.profile_photo) if user.profile_photo.attached?
+        end
+    end
+end
\ No newline at end of file
diff --git a/app/views/api/comments/show.json.jbuilder b/app/views/api/comments/show.json.jbuilder
new file mode 100644
index 0000000..43f732c
--- /dev/null
+++ b/app/views/api/comments/show.json.jbuilder
@@ -0,0 +1 @@
+json.extract! @comment, :body, :post_id, :comment_author_id
\ No newline at end of file
diff --git a/app/views/api/posts/index.json.jbuilder b/app/views/api/posts/index.json.jbuilder
index 8361b76..af6d167 100644
--- a/app/views/api/posts/index.json.jbuilder
+++ b/app/views/api/posts/index.json.jbuilder
@@ -1,15 +1,29 @@
 
 @posts.each do |post|
+    comments = post.comments
     json.posts do
         json.set! post.id do
             json.extract! post, :author_id, :body, :id, :created_at
             json.photoUrl url_for(post.photo) if post.photo.attached?
+            # keep track of all the comment ids in each post
+            json.comments do
+                json.array! comments, :id
+            end
         end
     end
     json.users do
         json.set! post.author_id do
-            json.extract! post.author, :fname, :lname
-            json.photoUrl url_for(post.profile_photo) if post.author.profile_photo.attached?
+            user = post.author
+            json.extract! user, :fname, :lname
+            json.photoUrl url_for(user.profile_photo) if user.profile_photo.attached?
+        end
+    end
+
+    json.comments do
+        comments.each do |comment|
+            json.set! comment.id do
+                json.extract! comment, :id, :post_id, :comment_author_id, :created_at
+            end
         end
     end
 end
\ No newline at end of file
diff --git a/app/views/api/posts/show.json.jbuilder b/app/views/api/posts/show.json.jbuilder
index 5172a1b..7e3eb3e 100644
--- a/app/views/api/posts/show.json.jbuilder
+++ b/app/views/api/posts/show.json.jbuilder
@@ -7,4 +7,5 @@ end
 json.user do
     json.extract! @post.author, :fname, :lname
     json.photoUrl url_for(@post.profile_photo) if @post.author.profile_photo.attached?
-end
\ No newline at end of file
+end
+
diff --git a/config/routes.rb b/config/routes.rb
index 34a47fd..2e9ea2b 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -5,6 +5,7 @@ Rails.application.routes.draw do
     resource :user, only: [:create, :show]
     resource :session, only: [:create, :destroy, :show]
     resources :posts, only: [:index, :create, :destroy, :show, :update]
+    resources :comments, only: [:index, :create, :destroy, :update]
   end
 
   root 'static_pages#root'
diff --git a/db/migrate/20210915053752_create_comments.rb b/db/migrate/20210915053752_create_comments.rb
new file mode 100644
index 0000000..932dbd2
--- /dev/null
+++ b/db/migrate/20210915053752_create_comments.rb
@@ -0,0 +1,14 @@
+class CreateComments < ActiveRecord::Migration[6.1]
+  def change
+    create_table :comments do |t|
+      t.text :body, null: false
+      t.integer :post_id, null: false
+      t.integer :comment_author_id, null: false
+
+      t.timestamps
+    end
+
+    add_index :comments, :comment_author_id
+    add_index :comments, :post_id
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 6e63fe2..049e810 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -10,7 +10,7 @@
 #
 # It's strongly recommended that you check this file into your version control system.
 
-ActiveRecord::Schema.define(version: 2021_09_14_072245) do
+ActiveRecord::Schema.define(version: 2021_09_15_053752) do
 
   # These are extensions that must be enabled in order to support this database
   enable_extension "plpgsql"
@@ -43,6 +43,16 @@ ActiveRecord::Schema.define(version: 2021_09_14_072245) do
     t.index ["blob_id", "variation_digest"], name: "index_active_storage_variant_records_uniqueness", unique: true
   end
 
+  create_table "comments", force: :cascade do |t|
+    t.text "body", null: false
+    t.integer "post_id", null: false
+    t.integer "comment_author_id", null: false
+    t.datetime "created_at", precision: 6, null: false
+    t.datetime "updated_at", precision: 6, null: false
+    t.index ["comment_author_id"], name: "index_comments_on_comment_author_id"
+    t.index ["post_id"], name: "index_comments_on_post_id"
+  end
+
   create_table "posts", force: :cascade do |t|
     t.integer "author_id", null: false
     t.text "body", null: false
diff --git a/frontend/actions/comment_actions.js b/frontend/actions/comment_actions.js
new file mode 100644
index 0000000..133c320
--- /dev/null
+++ b/frontend/actions/comment_actions.js
@@ -0,0 +1,53 @@
+import * as CommentApiUtil from "../utils/comment_api_util";
+
+export const RECEIVE_ALL_COMMENTS = "RECEIVE_ALL_COMMENTS";
+export const REMOVE_COMMENT = "REMOVE_COMMENT";
+export const RECEIVE_COMMENT = "RECEIVE_COMMENT";
+
+
+const receiveComments = (comments) => {
+    return ({
+        type: RECEIVE_ALL_COMMENTS,
+        comments
+    });
+};
+
+
+
+const receiveComment = (comment) => {
+    return ({
+        type: RECEIVE_COMMENT,
+        comment
+    });
+};
+
+
+
+const removeComment = (commentId) => {
+    return ({
+        type: REMOVE_COMMENT,
+        commentId
+    });
+};
+
+
+export const fetchComments = () => (dispatch) => {
+    return CommentApiUtil.fetchComments()
+        .then((comments) => dispatch(receiveComments(comments)));
+};
+
+
+export const createComment = (comment) => (dispatch) => {
+    return CommentApiUtil.createComment(comment)
+        .then((comment) => dispatch(receiveComment(comment)));
+};
+
+export const deleteComment = (commentId) => (dispatch) => {
+    return CommentApiUtil.deleteComment(commentId)
+        .then((commentId) => dispatch(removeComment(commentId)));
+};
+
+export const updateComment = (comment) => (dispatch) => {
+    return CommentApiUtil.updateComment(comment)
+        .then((comment) => dispatch(receiveComment(comment)));
+};
\ No newline at end of file
diff --git a/frontend/algo_book.jsx b/frontend/algo_book.jsx
index 0e9e35c..6838f48 100644
--- a/frontend/algo_book.jsx
+++ b/frontend/algo_book.jsx
@@ -3,6 +3,7 @@ import ReactDOM from "react-dom";
 import configureStore from "./store/store";
 import Root from "./components/root";
 import {fetchPosts, fetchPost, createPost, deletePost, updatePost} from "./actions/post_actions";
+import { fetchComments } from "./utils/comment_api_util";
 // Testing
 // import { fetchPosts, fetchPost, createPost, deletePost, updatePost } from "./utils/post_api_util";
 // import {login, logout, signup} from "./utils/session_api_util"
@@ -26,7 +27,7 @@ document.addEventListener("DOMContentLoaded", () => {
     // window.createPost = createPost(post);
     // window.deletePost = deletePost(17);
     // window.updatePost = updatePost();
-
+    window.fetchComments = fetchComments;
 
 
     let store;
diff --git a/frontend/components/post/post_index.jsx b/frontend/components/post/post_index.jsx
index 519949b..87a8d6a 100644
--- a/frontend/components/post/post_index.jsx
+++ b/frontend/components/post/post_index.jsx
@@ -23,6 +23,7 @@ class PostIndex extends React.Component {
                                         postUser = {this.props.users[post.author_id]}
                                         currentUser={this.props.users[this.props.currentUserId]}
                                         key={post.id}
+                                        // comments={this.props.comments}
                                     />
                             );
                     })}
diff --git a/frontend/components/post/post_index_item.jsx b/frontend/components/post/post_index_item.jsx
index a486b59..96a98d7 100644
--- a/frontend/components/post/post_index_item.jsx
+++ b/frontend/components/post/post_index_item.jsx
@@ -36,7 +36,7 @@ class PostIndexItem extends React.Component {
 
     dropDownItems() {
         let className = this.state.dropdown ? "show-post-header-dropdown" : "hide-post-header-dropdown";
-        if (this.props.currentUser.id ===  this.props.post.author_id) {
+        if (this.props.currentUserId ===  this.props.post.author_id) {
             return (
                 <div className={className}>
                     <ul>
@@ -45,6 +45,16 @@ class PostIndexItem extends React.Component {
                     </ul>
                 </div>
             );
+        } else {
+            return(
+                <ul>
+                    <li>
+                        hello
+                    </li>
+                    <li>who</li>
+                    <li>hi</li>
+                </ul>
+            );
         };
     };
 
diff --git a/frontend/components/session_form/login_form.jsx b/frontend/components/session_form/login_form.jsx
index f35cdf1..65976b4 100644
--- a/frontend/components/session_form/login_form.jsx
+++ b/frontend/components/session_form/login_form.jsx
@@ -11,6 +11,7 @@ class LoginForm extends React.Component {
             password: ""
         }
         this.handleSubmit = this.handleSubmit.bind(this);
+        this.loginDemo = this.loginDemo.bind(this);
     };
 
     handleSubmit(e) {
@@ -28,48 +29,81 @@ class LoginForm extends React.Component {
 
     componentWillUnmount() {
         this.props.resetErrors();
-    }
+    };
+
+    loginDemo() {
+        // note: this.setstate is asynchronous, so have to pass it a callback
+        this.setState({
+            email: "a",
+            password: "123456"
+        }, () => {
+            this.props.login(this.state)
+            // .then(() => this.props.history.push("./"));
+        });
+    };
 
 
     render() {
         return (
             <div className="login-form-container">
 
-                <div>
-                    <img src="https://lh3.googleusercontent.com/proxy/HtU0a_h_wjaViEyAiiCU3ivY2-ullrROdSDpRlfACis1w3ds0ntElc7oj7NXhlh3cjLIg03ymIi2AaX7Kh0VjgHzUinANqwkOeD0UvCE-eZwo8JEq1TjJus3n9SJUXHG0vFptjuZuIR7Iqz7SUm3LErP" alt="image tag" />
-                    Connect with friends and the world around you on AlgoBook
+                <div className="splash-logo-div">
+                    <div className="splash-logo">
+                        Algobook
+                    </div>
+                    {/* <img src="https://lh3.googleusercontent.com/proxy/HtU0a_h_wjaViEyAiiCU3ivY2-ullrROdSDpRlfACis1w3ds0ntElc7oj7NXhlh3cjLIg03ymIi2AaX7Kh0VjgHzUinANqwkOeD0UvCE-eZwo8JEq1TjJus3n9SJUXHG0vFptjuZuIR7Iqz7SUm3LErP" alt="image tag" /> */}
+
+                    <div className="splash-text">
+                        Connect with friends and the world around you on AlgoBook
+                    </div>
                 </div>
+
                 <form className="login-form">
                     <ul>
                         {this.props.errors.map((error, i) => {
                             return (<li key={`error-${i}`}>{error}</li>)
                         })}
                     </ul>
-                    <label>
-                        <input 
-                            type="text"
-                            value={this.state.email}
-                            placeholder="Email or Phone Number"
-                            onChange={this.handleInput("email")}
-                        />
-                    </label>
-
-
-                    <label>
-                        <input
-                            type="password"
-                            value={this.state.password}
-                            placeholder="Password"
-                            onChange={this.handleInput("password")}
-                        />
-                    </label>
-
-                    <button 
-                        className="login-button" 
-                        onClick={this.handleSubmit}>
-                            Log In
-                    </button>
-                    <Link className="signup-link" to={"/signup"}>Create New Account</Link>
+
+                    <div className="text-password">
+                        <label>
+                            <input 
+                                type="text"
+                                value={this.state.email}
+                                placeholder="Email or Phone Number"
+                                onChange={this.handleInput("email")}
+                            />
+                        </label>
+
+
+                        <label>
+                            <input
+                                type="password"
+                                value={this.state.password}
+                                placeholder="Password"
+                                onChange={this.handleInput("password")}
+                            />
+                        </label>
+                    </div>
+
+                    <div className="login-button-div">
+                        <button
+                            className="login-button" 
+                            onClick={this.handleSubmit}>
+                                Log In
+                        </button>
+                    </div>
+                    
+                    <div className="">
+                        <a onClick={this.loginDemo}>Demo Login</a>
+                    </div>
+
+
+                    <div className="signup-link-div">
+                        <Link className="signup-link" to={"/signup"}>Create New Account</Link>
+                    </div>
+
+
                 </form>
             </div>
         );
diff --git a/frontend/reducers/comments_reducer.js b/frontend/reducers/comments_reducer.js
new file mode 100644
index 0000000..f88485c
--- /dev/null
+++ b/frontend/reducers/comments_reducer.js
@@ -0,0 +1,23 @@
+import { RECEIVE_ALL_COMMENTS, REMOVE_COMMENT, RECEIVE_COMMENT } from "../actions/comment_actions";
+
+const CommentsReducer = (oldState={}, action) => {
+    Object.freeze(oldState);
+
+    let newState = Object.assign({}, oldState);
+
+    switch (action.type) {
+        case RECEIVE_ALL_COMMENTS:
+            return action.comments.comments;
+        case RECEIVE_COMMENT:
+            newState[action.comment.id] = action.comment;
+            return newState;
+        case REMOVE_COMMENT:
+            delete newState[action.commentId]
+            return newState;
+        default:
+            return oldState;
+    };
+};
+
+
+export default CommentsReducer;
\ No newline at end of file
diff --git a/frontend/reducers/entities_reducer.js b/frontend/reducers/entities_reducer.js
index d2d6d01..12c4274 100644
--- a/frontend/reducers/entities_reducer.js
+++ b/frontend/reducers/entities_reducer.js
@@ -1,11 +1,13 @@
 import { combineReducers } from "redux";
+import CommentsReducer from "./comments_reducer";
 import PostsReducer from "./posts_reducer";
 import usersReducer from "./users_reducer";
 
 
 const entitiesReducer = combineReducers({
     users: usersReducer,
-    posts: PostsReducer
+    posts: PostsReducer,
+    comments: CommentsReducer
 });
 
 export default entitiesReducer;
diff --git a/frontend/reducers/users_reducer.js b/frontend/reducers/users_reducer.js
index a024b26..d32642e 100644
--- a/frontend/reducers/users_reducer.js
+++ b/frontend/reducers/users_reducer.js
@@ -8,7 +8,8 @@ const usersReducer = (state={}, action) => {
         case RECEIVE_CURRENT_USER:
             return Object.assign({}, state, {[action.user.id]: action.user})
         case RECEIVE_ALL_POSTS:
-            return Object.assign({}, action.posts.users, state);  // IS THIS BAD
+            
+            return Object.assign({}, state, action.posts.users);  // IS THIS BAD
         case RECEIVE_POST:
             return Object.assign({}, state, {[action.post.post.author_id]: action.post.user});
         default:
diff --git a/frontend/utils/comment_api_util.js b/frontend/utils/comment_api_util.js
new file mode 100644
index 0000000..7da90f2
--- /dev/null
+++ b/frontend/utils/comment_api_util.js
@@ -0,0 +1,39 @@
+
+export const fetchComments = () => {
+    return $.ajax({
+        url: `/api/comments`,
+        method: "GET"
+    });
+};
+
+
+export const createComment = (comment) => {
+    return $.ajax({
+        url: `/api/comments`,
+        method: "POST",
+        data: {comment}
+    });
+};
+
+
+
+export const deleteComment = (commentId) => {
+    return $.ajax({
+        url: `/api/comments/${commentId}`,
+        method: "DELETE"
+    });
+};
+
+
+
+export const updateComment = () => {
+    return $.ajax({
+        url: `/api/comments/${commentId}`,
+        method: "PATCH",
+        data: {comment}
+    });
+};
+
+
+
+
diff --git a/test/controllers/api/comments_controller_test.rb b/test/controllers/api/comments_controller_test.rb
new file mode 100644
index 0000000..fc09e6e
--- /dev/null
+++ b/test/controllers/api/comments_controller_test.rb
@@ -0,0 +1,7 @@
+require "test_helper"
+
+class Api::CommentsControllerTest < ActionDispatch::IntegrationTest
+  # test "the truth" do
+  #   assert true
+  # end
+end
